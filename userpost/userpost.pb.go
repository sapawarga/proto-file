// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: userpost.proto

package userpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ByID) Reset() {
	*x = ByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByID) ProtoMessage() {}

func (x *ByID) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByID.ProtoReflect.Descriptor instead.
func (*ByID) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{0}
}

func (x *ByID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetListUserPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityName string `protobuf:"bytes,1,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`
	Username     string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Category     string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Status       int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Page         int64  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Limit        int64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	SortBy       string `protobuf:"bytes,7,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	OrderBy      string `protobuf:"bytes,8,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetListUserPostRequest) Reset() {
	*x = GetListUserPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListUserPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListUserPostRequest) ProtoMessage() {}

func (x *GetListUserPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListUserPostRequest.ProtoReflect.Descriptor instead.
func (*GetListUserPostRequest) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{1}
}

func (x *GetListUserPostRequest) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *GetListUserPostRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetListUserPostRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetListUserPostRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetListUserPostRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListUserPostRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListUserPostRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *GetListUserPostRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetListUserPostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*UserPost `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Metadata *Metadata   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetListUserPostResponse) Reset() {
	*x = GetListUserPostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListUserPostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListUserPostResponse) ProtoMessage() {}

func (x *GetListUserPostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListUserPostResponse.ProtoReflect.Descriptor instead.
func (*GetListUserPostResponse) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{2}
}

func (x *GetListUserPostResponse) GetData() []*UserPost {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetListUserPostResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Total     int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Metadata) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Metadata) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type UserPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                 string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Tag                   string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	ImagePath             string   `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	Images                string   `protobuf:"bytes,5,opt,name=images,proto3" json:"images,omitempty"`
	LastUserPostCommentId int64    `protobuf:"varint,6,opt,name=last_user_post_comment_id,json=lastUserPostCommentId,proto3" json:"last_user_post_comment_id,omitempty"`
	LastComment           *Comment `protobuf:"bytes,7,opt,name=last_comment,json=lastComment,proto3" json:"last_comment,omitempty"`
	LikesCount            int64    `protobuf:"varint,8,opt,name=likes_count,json=likesCount,proto3" json:"likes_count,omitempty"`
	IsLiked               bool     `protobuf:"varint,9,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	CommentCounts         int64    `protobuf:"varint,10,opt,name=comment_counts,json=commentCounts,proto3" json:"comment_counts,omitempty"`
	Status                int64    `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Actor                 *Actor   `protobuf:"bytes,12,opt,name=actor,proto3" json:"actor,omitempty"`
	CreatedAt             string   `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             string   `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserPost) Reset() {
	*x = UserPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPost) ProtoMessage() {}

func (x *UserPost) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPost.ProtoReflect.Descriptor instead.
func (*UserPost) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{4}
}

func (x *UserPost) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserPost) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UserPost) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *UserPost) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *UserPost) GetLastUserPostCommentId() int64 {
	if x != nil {
		return x.LastUserPostCommentId
	}
	return 0
}

func (x *UserPost) GetLastComment() *Comment {
	if x != nil {
		return x.LastComment
	}
	return nil
}

func (x *UserPost) GetLikesCount() int64 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *UserPost) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *UserPost) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *UserPost) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserPost) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UserPost) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserPost) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserPostId int64  `protobuf:"varint,2,opt,name=user_post_id,json=userPostId,proto3" json:"user_post_id,omitempty"`
	Comment    string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt  string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy  *Actor `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy  *Actor `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{5}
}

func (x *Comment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetUserPostId() int64 {
	if x != nil {
		return x.UserPostId
	}
	return 0
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Comment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Comment) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Comment) GetCreatedBy() *Actor {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Comment) GetUpdatedBy() *Actor {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PhotoUrl string `protobuf:"bytes,3,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
	Role     int64  `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	Regency  string `protobuf:"bytes,5,opt,name=regency,proto3" json:"regency,omitempty"`
	District string `protobuf:"bytes,6,opt,name=district,proto3" json:"district,omitempty"`
	Village  string `protobuf:"bytes,7,opt,name=village,proto3" json:"village,omitempty"`
	Rw       string `protobuf:"bytes,8,opt,name=rw,proto3" json:"rw,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{6}
}

func (x *Actor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Actor) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *Actor) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *Actor) GetRegency() string {
	if x != nil {
		return x.Regency
	}
	return ""
}

func (x *Actor) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *Actor) GetVillage() string {
	if x != nil {
		return x.Village
	}
	return ""
}

func (x *Actor) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

type CreateNewPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Images []*Image `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	Tags   string   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Status int64    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateNewPostRequest) Reset() {
	*x = CreateNewPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewPostRequest) ProtoMessage() {}

func (x *CreateNewPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewPostRequest.ProtoReflect.Descriptor instead.
func (*CreateNewPostRequest) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNewPostRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateNewPostRequest) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateNewPostRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *CreateNewPostRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{8}
}

func (x *Image) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{9}
}

func (x *StatusResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateUserPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Status int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateUserPostRequest) Reset() {
	*x = UpdateUserPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPostRequest) ProtoMessage() {}

func (x *UpdateUserPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPostRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPostRequest) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserPostRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserPostRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateUserPostRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *CommentsResponse) Reset() {
	*x = CommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentsResponse) ProtoMessage() {}

func (x *CommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentsResponse.ProtoReflect.Descriptor instead.
func (*CommentsResponse) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{11}
}

func (x *CommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

type CreateCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPostId int64  `protobuf:"varint,1,opt,name=user_post_id,json=userPostId,proto3" json:"user_post_id,omitempty"`
	Comment    string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Status     int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateCommentRequest) Reset() {
	*x = CreateCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userpost_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentRequest) ProtoMessage() {}

func (x *CreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userpost_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_userpost_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCommentRequest) GetUserPostId() int64 {
	if x != nil {
		return x.UserPostId
	}
	return 0
}

func (x *CreateCommentRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateCommentRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_userpost_proto protoreflect.FileDescriptor

var file_userpost_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x04, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x70, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x77, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70,
	0x6f, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3e, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x41, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0xe8, 0x04, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f,
	0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x70, 0x6f, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x49,
	0x44, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70,
	0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x42,
	0x79, 0x4d, 0x65, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x4c, 0x69, 0x6b, 0x65,
	0x4f, 0x72, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x49,
	0x44, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e,
	0x2e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_userpost_proto_rawDescOnce sync.Once
	file_userpost_proto_rawDescData = file_userpost_proto_rawDesc
)

func file_userpost_proto_rawDescGZIP() []byte {
	file_userpost_proto_rawDescOnce.Do(func() {
		file_userpost_proto_rawDescData = protoimpl.X.CompressGZIP(file_userpost_proto_rawDescData)
	})
	return file_userpost_proto_rawDescData
}

var file_userpost_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_userpost_proto_goTypes = []interface{}{
	(*ByID)(nil),                    // 0: userpost.ByID
	(*GetListUserPostRequest)(nil),  // 1: userpost.GetListUserPostRequest
	(*GetListUserPostResponse)(nil), // 2: userpost.GetListUserPostResponse
	(*Metadata)(nil),                // 3: userpost.Metadata
	(*UserPost)(nil),                // 4: userpost.UserPost
	(*Comment)(nil),                 // 5: userpost.Comment
	(*Actor)(nil),                   // 6: userpost.Actor
	(*CreateNewPostRequest)(nil),    // 7: userpost.CreateNewPostRequest
	(*Image)(nil),                   // 8: userpost.Image
	(*StatusResponse)(nil),          // 9: userpost.StatusResponse
	(*UpdateUserPostRequest)(nil),   // 10: userpost.UpdateUserPostRequest
	(*CommentsResponse)(nil),        // 11: userpost.CommentsResponse
	(*CreateCommentRequest)(nil),    // 12: userpost.CreateCommentRequest
}
var file_userpost_proto_depIdxs = []int32{
	4,  // 0: userpost.GetListUserPostResponse.data:type_name -> userpost.UserPost
	3,  // 1: userpost.GetListUserPostResponse.metadata:type_name -> userpost.Metadata
	5,  // 2: userpost.UserPost.last_comment:type_name -> userpost.Comment
	6,  // 3: userpost.UserPost.actor:type_name -> userpost.Actor
	6,  // 4: userpost.Comment.created_by:type_name -> userpost.Actor
	6,  // 5: userpost.Comment.updated_by:type_name -> userpost.Actor
	8,  // 6: userpost.CreateNewPostRequest.images:type_name -> userpost.Image
	5,  // 7: userpost.CommentsResponse.comments:type_name -> userpost.Comment
	1,  // 8: userpost.UserPostHandler.GetListUserPost:input_type -> userpost.GetListUserPostRequest
	0,  // 9: userpost.UserPostHandler.GetDetailUserPost:input_type -> userpost.ByID
	7,  // 10: userpost.UserPostHandler.CreateNewPost:input_type -> userpost.CreateNewPostRequest
	10, // 11: userpost.UserPostHandler.UpdateStatusOrTitle:input_type -> userpost.UpdateUserPostRequest
	0,  // 12: userpost.UserPostHandler.GetCommentsByID:input_type -> userpost.ByID
	12, // 13: userpost.UserPostHandler.CreateComment:input_type -> userpost.CreateCommentRequest
	1,  // 14: userpost.UserPostHandler.GetListUserPostByMe:input_type -> userpost.GetListUserPostRequest
	0,  // 15: userpost.UserPostHandler.LikeOrDislikeUserPost:input_type -> userpost.ByID
	2,  // 16: userpost.UserPostHandler.GetListUserPost:output_type -> userpost.GetListUserPostResponse
	4,  // 17: userpost.UserPostHandler.GetDetailUserPost:output_type -> userpost.UserPost
	9,  // 18: userpost.UserPostHandler.CreateNewPost:output_type -> userpost.StatusResponse
	9,  // 19: userpost.UserPostHandler.UpdateStatusOrTitle:output_type -> userpost.StatusResponse
	11, // 20: userpost.UserPostHandler.GetCommentsByID:output_type -> userpost.CommentsResponse
	9,  // 21: userpost.UserPostHandler.CreateComment:output_type -> userpost.StatusResponse
	2,  // 22: userpost.UserPostHandler.GetListUserPostByMe:output_type -> userpost.GetListUserPostResponse
	9,  // 23: userpost.UserPostHandler.LikeOrDislikeUserPost:output_type -> userpost.StatusResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_userpost_proto_init() }
func file_userpost_proto_init() {
	if File_userpost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userpost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListUserPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListUserPostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userpost_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userpost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userpost_proto_goTypes,
		DependencyIndexes: file_userpost_proto_depIdxs,
		MessageInfos:      file_userpost_proto_msgTypes,
	}.Build()
	File_userpost_proto = out.File
	file_userpost_proto_rawDesc = nil
	file_userpost_proto_goTypes = nil
	file_userpost_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserPostHandlerClient is the client API for UserPostHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPostHandlerClient interface {
	GetListUserPost(ctx context.Context, in *GetListUserPostRequest, opts ...grpc.CallOption) (*GetListUserPostResponse, error)
	GetDetailUserPost(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*UserPost, error)
	CreateNewPost(ctx context.Context, in *CreateNewPostRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	UpdateStatusOrTitle(ctx context.Context, in *UpdateUserPostRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetCommentsByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*CommentsResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetListUserPostByMe(ctx context.Context, in *GetListUserPostRequest, opts ...grpc.CallOption) (*GetListUserPostResponse, error)
	LikeOrDislikeUserPost(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*StatusResponse, error)
}

type userPostHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPostHandlerClient(cc grpc.ClientConnInterface) UserPostHandlerClient {
	return &userPostHandlerClient{cc}
}

func (c *userPostHandlerClient) GetListUserPost(ctx context.Context, in *GetListUserPostRequest, opts ...grpc.CallOption) (*GetListUserPostResponse, error) {
	out := new(GetListUserPostResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/GetListUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) GetDetailUserPost(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*UserPost, error) {
	out := new(UserPost)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/GetDetailUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) CreateNewPost(ctx context.Context, in *CreateNewPostRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/CreateNewPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) UpdateStatusOrTitle(ctx context.Context, in *UpdateUserPostRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/UpdateStatusOrTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) GetCommentsByID(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*CommentsResponse, error) {
	out := new(CommentsResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/GetCommentsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) GetListUserPostByMe(ctx context.Context, in *GetListUserPostRequest, opts ...grpc.CallOption) (*GetListUserPostResponse, error) {
	out := new(GetListUserPostResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/GetListUserPostByMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostHandlerClient) LikeOrDislikeUserPost(ctx context.Context, in *ByID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostHandler/LikeOrDislikeUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPostHandlerServer is the server API for UserPostHandler service.
type UserPostHandlerServer interface {
	GetListUserPost(context.Context, *GetListUserPostRequest) (*GetListUserPostResponse, error)
	GetDetailUserPost(context.Context, *ByID) (*UserPost, error)
	CreateNewPost(context.Context, *CreateNewPostRequest) (*StatusResponse, error)
	UpdateStatusOrTitle(context.Context, *UpdateUserPostRequest) (*StatusResponse, error)
	GetCommentsByID(context.Context, *ByID) (*CommentsResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*StatusResponse, error)
	GetListUserPostByMe(context.Context, *GetListUserPostRequest) (*GetListUserPostResponse, error)
	LikeOrDislikeUserPost(context.Context, *ByID) (*StatusResponse, error)
}

// UnimplementedUserPostHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedUserPostHandlerServer struct {
}

func (*UnimplementedUserPostHandlerServer) GetListUserPost(context.Context, *GetListUserPostRequest) (*GetListUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserPost not implemented")
}
func (*UnimplementedUserPostHandlerServer) GetDetailUserPost(context.Context, *ByID) (*UserPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailUserPost not implemented")
}
func (*UnimplementedUserPostHandlerServer) CreateNewPost(context.Context, *CreateNewPostRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPost not implemented")
}
func (*UnimplementedUserPostHandlerServer) UpdateStatusOrTitle(context.Context, *UpdateUserPostRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusOrTitle not implemented")
}
func (*UnimplementedUserPostHandlerServer) GetCommentsByID(context.Context, *ByID) (*CommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByID not implemented")
}
func (*UnimplementedUserPostHandlerServer) CreateComment(context.Context, *CreateCommentRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedUserPostHandlerServer) GetListUserPostByMe(context.Context, *GetListUserPostRequest) (*GetListUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserPostByMe not implemented")
}
func (*UnimplementedUserPostHandlerServer) LikeOrDislikeUserPost(context.Context, *ByID) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeOrDislikeUserPost not implemented")
}

func RegisterUserPostHandlerServer(s *grpc.Server, srv UserPostHandlerServer) {
	s.RegisterService(&_UserPostHandler_serviceDesc, srv)
}

func _UserPostHandler_GetListUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).GetListUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/GetListUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).GetListUserPost(ctx, req.(*GetListUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_GetDetailUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).GetDetailUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/GetDetailUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).GetDetailUserPost(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_CreateNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).CreateNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/CreateNewPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).CreateNewPost(ctx, req.(*CreateNewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_UpdateStatusOrTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).UpdateStatusOrTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/UpdateStatusOrTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).UpdateStatusOrTitle(ctx, req.(*UpdateUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_GetCommentsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).GetCommentsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/GetCommentsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).GetCommentsByID(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_GetListUserPostByMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).GetListUserPostByMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/GetListUserPostByMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).GetListUserPostByMe(ctx, req.(*GetListUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostHandler_LikeOrDislikeUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostHandlerServer).LikeOrDislikeUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostHandler/LikeOrDislikeUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostHandlerServer).LikeOrDislikeUserPost(ctx, req.(*ByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPostHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userpost.UserPostHandler",
	HandlerType: (*UserPostHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListUserPost",
			Handler:    _UserPostHandler_GetListUserPost_Handler,
		},
		{
			MethodName: "GetDetailUserPost",
			Handler:    _UserPostHandler_GetDetailUserPost_Handler,
		},
		{
			MethodName: "CreateNewPost",
			Handler:    _UserPostHandler_CreateNewPost_Handler,
		},
		{
			MethodName: "UpdateStatusOrTitle",
			Handler:    _UserPostHandler_UpdateStatusOrTitle_Handler,
		},
		{
			MethodName: "GetCommentsByID",
			Handler:    _UserPostHandler_GetCommentsByID_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _UserPostHandler_CreateComment_Handler,
		},
		{
			MethodName: "GetListUserPostByMe",
			Handler:    _UserPostHandler_GetListUserPostByMe_Handler,
		},
		{
			MethodName: "LikeOrDislikeUserPost",
			Handler:    _UserPostHandler_LikeOrDislikeUserPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpost.proto",
}
